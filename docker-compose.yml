
services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports: 
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SASL_ENABLED: "true"
      ZOOKEEPER_ALLOW_ANONYMOUS_LOGIN: "false"
      ZOOKEEPER_JAAS_LOGIN_RENEW: "3600000"
      JVMFLAGS: "-Djava.security.auth.login.config=/etc/kafka/zookeeper_jaas.conf"
      ZOO_CFG_EXTRA: "authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider sessionRequireClientSASLAuth=true"
      volumes:
        - ./kafka/zookeeper_jaas.conf:/etc/kafka/zookeeper_jaas.conf

  kafka1: 
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: SSL://0.0.0.0:9092
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_PLAINTEXT
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: SSL://kafka1:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      AFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: kafka123
      KAFKA_SSL_KEY_PASSWORD: kafka123
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: kafka123
    volumes:
      - ./kafka1-data:/var/lib/kafka/data
      - ./kafka/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
    depends_on:
      - zookeeper
  kafka2:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
  
  #kafka3 service...

  kafka-acl-setup:
    image: wurstmeister/kafka:latest
    depends_on:
      - kafka1
      - kafka2
    environment:
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
    volumes:
      - ./kafka/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        sleep 30
        kafka-topics.sh --create --if-not-exists --zookeeper zookeeper:2181 --topic order-created --partitions 3 --replication-factor 3
        kafka-acls.sh --authorizer-properties zookeeper.connect=zookeeper:2181 --add --allow-principal User:order-service --producer --topic order-created
        kafka-acls.sh --authorizer-properties zookeeper.connect=zookeeper:2181 --add --allow-principal User:user-service --consumer --topic order-created --group user-group
        kafka-acls.sh --authorizer-properties zookeeper.connect=zookeeper:2181 --add --allow-principal User:kafka-exporter --operation Describe --group user-group
        kafka-acls.sh --authorizer-properties zookeeper.connect=zookeeper:2181 --add --allow-principal User:kafka-exporter --operation Describe --topic order-created
        echo 'ACLs have been set up.'
      "
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    ports: 
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  mongo-inventory:
    image: mongo:4.4
    container_name: mongo-inventory
    environment:
      MONGO_URI: ${mongo_uri}
    ports:
      - "27017:27017"
    volumes:
      - mongo-inventory-data:/data/db

  mongo-users:
    image: mongo:4.4
    container_name: mongo-users
    environment:
      - MONGO_URI= value
    volumes: 
      - mongo-users-data:/data/db

  orders-service:
    build: ./services/orders
    ports:
      - "3002:3002"
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
  inventory-service:
    build: ./services/inventory
    ports:
      - "3001:3001"
    depends_on:
      - mongo-inventory
  users-service:
    build: ./services/users
    ports: 
      - "3003:3003"
    depends_on:
      - mongo-users
volumes:
  postgres-data:
  mongo-inventory-data:
